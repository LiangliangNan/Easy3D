##############################################################################
# GitHub Actions Workflow to test building PolyFit on Windows, Ubuntu, and macOS.
#
# Copyright (C) 2022 Liangliang Nan <liangliang.nan@gmail.com>
#
# Licensed under GNU LGPL.3, see LICENCE file
##############################################################################
name: Test Build Easy3D

on: [push, pull_request]

jobs:
  build:
    name: "Build on ${{ matrix.platform }} - ${{ matrix.build_type }}"
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
    runs-on: ${{ matrix.platform }}

    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Install dependencies for each platform
      - name: Install Dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update || true
          sudo apt-get install -y cmake build-essential libgl1-mesa-dev \
              mesa-common-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev \
              libcgal-dev qt6-base-dev \
              libavcodec-dev libavformat-dev libswscale-dev libavutil-dev

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update || true
          brew install cmake cgal qt ffmpeg

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Download and extract prebuilt Qt6
          curl -L -o qt6.zip https://example.com/path/to/qt6-prebuilt.zip
          Expand-Archive -Path qt6.zip -DestinationPath C:\Qt6
          # Add Qt6 to PATH
          echo "C:\Qt6\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Download and extract prebuilt CGAL
          curl -L -o cgal.zip https://example.com/path/to/cgal-prebuilt.zip
          Expand-Archive -Path cgal.zip -DestinationPath C:\CGAL
          # Add CGAL to PATH
          echo "C:\CGAL\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Download and extract prebuilt FFmpeg
          curl -L -o ffmpeg.zip https://example.com/path/to/ffmpeg-prebuilt.zip
          Expand-Archive -Path ffmpeg.zip -DestinationPath C:\FFmpeg
          # Add FFmpeg to PATH
          echo "C:\FFmpeg\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Install CMake using Chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"'

      # Configure the project
      - name: Configure (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B build/${{ matrix.build_type }} \
                -G "Unix Makefiles" \
                -DEasy3D_BUILD_PYTHON_BINDINGS=ON \
                -DEasy3D_BUILD_TUTORIALS=ON \
                -DEasy3D_BUILD_TESTS=ON \
                -DEasy3D_ENABLE_CGAL=ON \
                -DEasy3D_ENABLE_QT=ON \
                -DEasy3D_ENABLE_FFMPEG=ON

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cmake -S . -B build\${{ matrix.build_type }} ^
                -G "Visual Studio 17 2022" ^
                -A x64 ^
                -DEasy3D_BUILD_PYTHON_BINDINGS=ON ^
                -DEasy3D_BUILD_TUTORIALS=ON ^
                -DEasy3D_BUILD_TESTS=ON ^
                -DEasy3D_ENABLE_CGAL=ON ^
                -DEasy3D_ENABLE_QT=ON ^
                -DEasy3D_ENABLE_FFMPEG=ON

      # Build the project
      - name: Build (Linux & macOS)
        if: runner.os != 'Windows'
        run: cmake --build build/${{ matrix.build_type }}

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: cmake --build build\${{ matrix.build_type }} --config ${{ matrix.build_type }}